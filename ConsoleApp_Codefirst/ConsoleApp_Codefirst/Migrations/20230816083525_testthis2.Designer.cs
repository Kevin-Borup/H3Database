// <auto-generated />
using System;
using ConsoleApp_Codefirst;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConsoleApp_Codefirst.Migrations
{
    [DbContext(typeof(SchoolDbCph))]
    [Migration("20230816083525_testthis2")]
    partial class testthis2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConsoleApp_Codefirst.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ids");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cities");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Countries");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("States");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Streets");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int")
                        .HasColumnName("Zipcodes");

                    b.HasKey("ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Courseids");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Coursenames");

                    b.HasKey("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Grade", b =>
                {
                    b.Property<int>("gradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Gradeids");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("gradeID"));

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("Studentids");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subjects");

                    b.Property<int>("value")
                        .HasColumnType("int")
                        .HasColumnName("Values");

                    b.HasKey("gradeID");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.LibraryCard", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Userids");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Creationdates");

                    b.Property<int>("RentedBooks")
                        .HasColumnType("int")
                        .HasColumnName("Rentedbooks");

                    b.HasKey("UserId");

                    b.ToTable("Librarycards");
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Ids");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int")
                        .HasColumnName("Addressids");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Emailaddresses");

                    b.Property<int?>("LibraryCardUserId")
                        .HasColumnType("int")
                        .HasColumnName("Librarycarduserids");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Names");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phonenumbers");

                    b.HasKey("Id");

                    b.HasIndex("AddressID");

                    b.HasIndex("LibraryCardUserId");

                    b.ToTable("People");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("int")
                        .HasColumnName("Studentsids");

                    b.Property<int>("coursesCourseID")
                        .HasColumnType("int")
                        .HasColumnName("Coursescourseids");

                    b.HasKey("StudentsId", "coursesCourseID");

                    b.HasIndex("coursesCourseID");

                    b.ToTable("Coursestudents");
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.Property<int>("TeachersId")
                        .HasColumnType("int")
                        .HasColumnName("Teachersids");

                    b.Property<int>("coursesCourseID")
                        .HasColumnType("int")
                        .HasColumnName("Coursescourseids");

                    b.HasKey("TeachersId", "coursesCourseID");

                    b.HasIndex("coursesCourseID");

                    b.ToTable("Courseteachers");
                });

            modelBuilder.Entity("GradeStudent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("gradeID")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "gradeID");

                    b.HasIndex("gradeID");

                    b.ToTable("GradeStudent");
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Student", b =>
                {
                    b.HasBaseType("ConsoleApp_Codefirst.Person");

                    b.Property<int>("studentID")
                        .HasColumnType("int")
                        .HasColumnName("Studentids");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Teacher", b =>
                {
                    b.HasBaseType("ConsoleApp_Codefirst.Person");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int")
                        .HasColumnName("Teacherids");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Subjects");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Grade", b =>
                {
                    b.HasOne("ConsoleApp_Codefirst.Student", null)
                        .WithMany("grades")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Person", b =>
                {
                    b.HasOne("ConsoleApp_Codefirst.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp_Codefirst.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardUserId");

                    b.Navigation("Address");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("ConsoleApp_Codefirst.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp_Codefirst.Course", null)
                        .WithMany()
                        .HasForeignKey("coursesCourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTeacher", b =>
                {
                    b.HasOne("ConsoleApp_Codefirst.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp_Codefirst.Course", null)
                        .WithMany()
                        .HasForeignKey("coursesCourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GradeStudent", b =>
                {
                    b.HasOne("ConsoleApp_Codefirst.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp_Codefirst.Grade", null)
                        .WithMany()
                        .HasForeignKey("gradeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Student", b =>
                {
                    b.HasOne("ConsoleApp_Codefirst.Person", null)
                        .WithOne()
                        .HasForeignKey("ConsoleApp_Codefirst.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Teacher", b =>
                {
                    b.HasOne("ConsoleApp_Codefirst.Person", null)
                        .WithOne()
                        .HasForeignKey("ConsoleApp_Codefirst.Teacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp_Codefirst.Student", b =>
                {
                    b.Navigation("grades");
                });
#pragma warning restore 612, 618
        }
    }
}
